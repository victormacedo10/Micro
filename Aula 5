Para as questões 2 a 5, considere que as variáveis f, g, h, i e j são do tipo inteiro (16 bits na arquitetura do MSP430),
e que o vetor A[] é do tipo inteiro. Estas variáveis estão armazenadas nos seguintes registradores: 
f: R4 g: R5 h: R6 i: R7 j: R8 A: R9 Utilize os registradores R11, R12, R13, R14 e R15 para armazenar valores temporários.

1. Escreva os trechos de código assembly do MSP430 para: 
(a) Somente setar o bit menos significativo de R5. 

  bis.w #1, R5

(b) Somente setar dois bits de R6: o menos significativo e o segundo menos significativo. 

  bis.w #3, R6

(c) Somente zerar o terceiro bit menos significativo de R7. 

  bic.w #4, R7

(d) Somente zerar o terceiro e o quarto bits menos significativo de R8.

  bic.w #12, R8

(e) Somente inverter o bit mais significativo de R9. 
  
  xor.w #32768, R9

(f) Inverter o nibble mais significativo de R10, e setar o nibble menos significativo de R10.

  xor.w #61440, R10
  bis.w #15, R10

2. "Traduza" o seguinte trecho de código em C para o assembly do MSP430:

  if(i>j) f = g+h+10;
  else f = g-h-10;
  
   LOOP:
    cmp R7, R8
    jl IF
    mov.w R5, R4
    sub.w R6, R4
    sub.w #10, R4
    jmp LOOP
   IF:
    mov.w R5, R4
    add.w R6, R4
    add.w #10, R4
    jmp LOOP

3. "Traduza" o seguinte trecho de código em C para o assembly do MSP430:

  while(save[i]!=k) i++;

   LOOP:
    mov.w R7, R11    ;R7 = i, R11 = temp
    rla R11          ;R11 = 2*i
    add.w R9, R11    ;R11 => R11(R9)
    cmp 0(R11), R12  ;R12 = k
    jeq EXIT
    inc.w 
    jmp LOOP
   EXIT:
    jmp LOOP

4. "Traduza" o seguinte trecho de código em C para o assembly do MSP430:

for(i=0; i<100; i++) A[i] = i*2;

   LOOP:
    mov.w #00, R7
    mov.w R7, R11    ;R7 = i, R11 = temp
    rla R11          ;R11 = 2*i
    add.w R9, R11    ;R11 => R11(R9)
    cmp #100, R7
    jeq EXIT
    mov.w 0(R11), R7
    add.w 0(R11), R7
    inc.w R7
    jmp LOOP
   EXIT:
    jmp LOOP

5. "Traduza" o seguinte trecho de código em C para o assembly do MSP430:

for(i=99; i>=0; i--) A[i] = i*2;

   LOOP:
    mov.w #99, R7
    mov.w R7, R11    ;R7 = i, R11 = temp
    rla R11          ;R11 = 2*i
    add.w R9, R11    ;R11 => R11(R9)
    cmp #00, R7
    jge EXIT
    mov.w 0(R11), R7
    add.w 0(R11), R7
    dec.w R7
    jmp LOOP
   EXIT:
    jmp LOOP

    
    
